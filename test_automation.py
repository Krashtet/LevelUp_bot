import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

from questions import QUESTIONS_ANSWERS
from config import RandomDelays, SELECTORS

DELAYS = RandomDelays()


class TestAutomation:
    def __init__(self, driver):
        self.driver = driver
        self.wait = WebDriverWait(driver, 10)
        self.questions_answers = QUESTIONS_ANSWERS

    def start_every_day_quest(self):
        """ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' """
        try:
            start_game = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, SELECTORS['start_game']))
            )

            # –ü—Ä–æ–∫—Ä—É—Ç–∏–º –¥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", start_game)
            time.sleep(DELAYS['scrol'])

            start_game.click()
            print('üöÄ –†–∞–∫–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...')
        except TimeoutException:
            print('üõë –ò–≥—Ä–∞ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–±–µ—Ä–µ–≥–∏ –±–æ—Ç–∞!')

    def get_current_question(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä
            question_element = self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, SELECTORS['question']))
            )
            return question_element.text.strip()
        except TimeoutException:
            print("üåö –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return None

    def get_answer_options(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            answer_elements = self.driver.find_elements(By.XPATH, SELECTORS['answer_options'])
            print([elem.text.strip() for elem in answer_elements if elem.text.strip()])
            return [elem.text.strip() for elem in answer_elements if elem.text.strip()]
        except NoSuchElementException:
            print("üåö –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤")
            return []

    def select_answer(self, answer_text):
        """–í—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ —Ç–µ–∫—Å—Ç—É"""
        try:
            # –ò—â–µ–º span —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            answer_spans = self.driver.find_elements(By.XPATH, SELECTORS['answer_options'])

            for span in answer_spans:
                print(span.text)
                if span.text.strip() == answer_text:

                    # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π section —Å –∫–ª–∞—Å—Å–æ–º orange_color orange_bg –¥–ª—è –∫–ª–∏–∫–∞
                    div = span.find_element(By.XPATH, "./../section[@class='orange_color orange_bg']/div")
                    div.click()
                    print(f"–í—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç: {answer_text}")
                    return True

            print(f"–û—Ç–≤–µ—Ç '{answer_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return False

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ '{answer_text}': {e}")
            return False

    def answer_question(self, question_text):
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        if question_text not in self.questions_answers:
            print(f"‡≤†_‡≤† –í–æ–ø—Ä–æ—Å '{question_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –æ—Ç–≤–µ—Ç–æ–≤")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            self.save_unknown_question(question_text)

            # –≤—ã–±–µ—Ä–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥ –≤–æ–ø—Ä–æ—Å—É:
            parent_section = self.driver.find_element(By.CSS_SELECTOR, 'SELECTORS["answer_container"]')
            print('–í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: ', len(parent_section))
            parent_section[random.uniform(0, len(parent_section))].click()
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            submit_button = self.driver.find_element(By.CSS_SELECTOR, SELECTORS["submit_button"])
            submit_button.click()

            return False

        correct_answers = self.questions_answers[question_text]
        print(f"–í–æ–ø—Ä–æ—Å: {question_text}")
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {correct_answers}")

        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        available_answers = self.get_answer_options()
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {available_answers}")

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        selected_count = 0
        for correct_answer in correct_answers:
            if correct_answer in available_answers:
                if self.select_answer(correct_answer):
                    selected_count += 1
                    time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏

        print(f"–í—ã–±—Ä–∞–Ω–æ {selected_count} –∏–∑ {len(correct_answers)} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
        return selected_count > 0

    def save_unknown_question(self, question_text):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            available_answers = self.get_answer_options()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
            question_line = f"{question_text}: {', '.join(available_answers)}\n"

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open("unknown_questions.txt", "a", encoding="utf-8") as f:
                f.write(question_line)

            print(f"üß∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ unknown_questions.txt")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")

    def process_current_page(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ–ø—Ä–æ—Å–æ–º"""
        question = self.get_current_question()
        if question:
            return self.answer_question(question)
        return False

    def submit_answers(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏)"""
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            submit_button = self.driver.find_element(By.XPATH, SELECTORS["submit_button"])
            submit_button.click()
            print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
            return False

    def run_automation(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""

        # self.start_every_day_quest()
        time.sleep(10)
        # try:
        while True:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if not self.process_current_page():
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                break

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            time.sleep(1)

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã
            if not self.submit_answers():
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∏–ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
            try:
                next_question = self.get_current_question()
                if not next_question:
                    print("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
                    break
            except:
                print("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
                break

        print("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # except Exception as e:
        #     print(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")